CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"IDe_2d_"]
mean(subset(CleanData,Condition==cond & Subject==s & Button_Type==but & Error_==0)$MTe/1000)
CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"IDe_2d_"]/mean(subset(CleanData,Condition==cond & Subject==s & Button_Type==but & Error_==0)$MTe/1000)
CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"TP_2d_"]= CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"IDe_2d_"]/mean(subset(CleanData,Condition==cond & Subject==s & Button_Type==but & Error_==0)$MTe/1000)
for(s in 1:(unique(CleanData$Subject)))
{
for(cond in unique(CleanData$Condition))
{
for(but in unique(CleanData$Button_Type))
{
CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"TP_2d_"]= CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"IDe_2d_"]/mean(subset(CleanData,Condition==cond & Subject==s & Button_Type==but & Error_==0)$MTe/1000)
}
}
}
for(s in (unique(CleanData$Subject)))
{
for(cond in unique(CleanData$Condition))
{
for(but in unique(CleanData$Button_Type))
{
CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"TP_2d_"]= CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"IDe_2d_"]/mean(subset(CleanData,Condition==cond & Subject==s & Button_Type==but & Error_==0)$MTe/1000)
}
}
}
df_TP=data.frame(Subject=numeric(),MSDT_TP=numeric(),SPOCK_TP=numeric(),SPOCK_RE_TP=numeric())
for(s in 1:length(unique(CleanData$Subject)))
{
x=subset(CleanData, Subject==unique(CleanData$Subject)[s]);
df_TP=rbind(df_TP, data.frame(Subject=unique(CleanData$Subject)[s], MSDT_TP=unique(subset(x, Button_Type=="MSDT")$Fitts_TP_avg_2d), SPOCK_TP=unique(subset(x, Button_Type=="SPOCK")$Fitts_TP_avg_2d), SPOCK_RE_TP=unique(subset(x, Button_Type=="SPOCK_Recalib")$Fitts_TP_avg_2d)))
}
df_TP
shapiro.test(df_TP$MSDT_TP-df_TP$SPOCK_TP)
shapiro.test(df_TP$MSDT_TP)
shapiro.test(df_TP$SPOCK_TP)
shapiro.test(df_TP$SPOCK_RE_TP)
wilcox.test(df_TP$MSDT_TP, df_TP$SPOCK_TP,paired=TRUE)
t.test(df_TP$MSDT_TP, df_TP$SPOCK_TP,paired=TRUE)#<--significant better
t.test(df_TP$MSDT_TP, df_TP$SPOCK_RE_TP,paired=TRUE)#<--significant better
MeanTP=colMeans(df_TP)
MeanTP
t.test(df_TP$MSDT_TP, df_TP$SPOCK_RE_TP,paired=TRUE)#<--significant better
t.test(df_TP$SPOCK_TP, df_TP$SPOCK_RE_TP,paired=TRUE)
t.test(df_TP$SPOCK_TP, df_TP$SPOCK_RE_TP,paired=TRUE)
df_TP
ggplot(melt(df_TP,id.vars="Subject")) + geom_jitter(aes(x=Subject,y=value,colour=variable))+scale_colour_discrete("Pattern")
library(ggplot2)
library(reshape2)
library(plyr)
ggplot(melt(df_TP,id.vars="Subject")) + geom_jitter(aes(x=Subject,y=value,colour=variable))+scale_colour_discrete("Pattern")
ggplot(melt(df_TP,id.vars="Subject")) + geom_line(aes(x=Subject,y=value,colour=variable))+scale_colour_discrete("Pattern")
library(ggplot2)
library(reshape2)
library(plyr)
FittsData = read.table("C:/Users/dre/Documents/Matlab/StudyEvaluation/AllPartCombined.csv",sep=",",header=1,skip=0)
ClickTimes= read.table("C:/Users/dre/Documents/Matlab/StudyEvaluation/AllClickTimesCombined.csv",sep=",",header=1,skip=0)
CleanData=subset(FittsData, Subject!=100 & Subject!=105)
CleanData=subset(CleanData,Practice_==0)
p=ggplot(subset(CleanData, Error_==1))  + geom_point(aes(x=TargetX-EndX, y=TargetY-EndY, colour="projection errors")) + coord_equal(); print(p)
CleanData[CleanData$Error_==1 & ((CleanData$TargetY-CleanData$EndY)<(CleanData$W/2)*1.1) &(CleanData$TargetY-CleanData$EndY)>0,]$Error_=0
p + geom_point(data=subset(CleanData, Error_==1),aes(x=TargetX-EndX, y=TargetY-EndY, colour=Button_Type))
normal_msdt <- shapiro.test(subset(CleanData, Button_Type=="MSDT")$MTe)
print(normal_msdt$p.value)
print(result$p.value)
deviation_mea=deviation_mea[0,]
for(s in 1:length(unique(CleanData$Subject)))
{
x=subset(CleanData, Subject==unique(CleanData$Subject)[s] & Error_==0);
for(cond in 1:length(unique(CleanData$Condition)))
{
y=subset(x,Condition==unique(CleanData$Condition)[cond])
deviation_mea=rbind(deviation_mea, data.frame(Subject=unique(CleanData$Subject)[s], condition=unique(CleanData$Condition)[cond],mea_msdt=mean(subset(y,Button_Type=="MSDT")$dx_2d_),mea_spock=mean(subset(y,Button_Type=="SPOCK")$dx_2d_),mea_spock_re=mean(subset(y,Button_Type=="SPOCK_Recalib")$dx_2d_)))
}
}
deviation_mea_subject=aggregate(.~Subject, data=deviation_mea, mean)[,-2]
shapiro.test(deviation_mea$mea_spock-deviation_mea$mea_msdt)
wilcox.test(deviation_mea$mea_spock, deviation_mea$mea_msdt,paired=TRUE)
{
for(cond in unique(CleanData$Condition))
{
for(but in unique(CleanData$Button_Type))
{
CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"TP_2d_"]= CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"IDe_2d_"]/mean(subset(CleanData,Condition==cond & Subject==s & Button_Type==but & Error_==0)$MTe/1000)
}
}
}
df_TP=data.frame(Subject=numeric(),MSDT_TP=numeric(),SPOCK_TP=numeric(),SPOCK_RE_TP=numeric())
for(s in 1:length(unique(CleanData$Subject)))
{
x=subset(CleanData, Subject==unique(CleanData$Subject)[s]);
df_TP=rbind(df_TP, data.frame(Subject=unique(CleanData$Subject)[s], MSDT_TP=unique(subset(x, Button_Type=="MSDT")$Fitts_TP_avg_2d), SPOCK_TP=unique(subset(x, Button_Type=="SPOCK")$Fitts_TP_avg_2d), SPOCK_RE_TP=unique(subset(x, Button_Type=="SPOCK_Recalib")$Fitts_TP_avg_2d)))
}
MeanTP=colMeans(df_TP)
MeanTP
for(s in (unique(CleanData$Subject)))
{
for(cond in unique(CleanData$Condition))
{
for(but in unique(CleanData$Button_Type))
{
CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"TP_2d_"]= CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"IDe_2d_"]/mean(subset(CleanData,Condition==cond & Subject==s & Button_Type==but & Error_==0)$MTe/1000)
}
}
}
MeanTP=colMeans(df_TP)
MeanTP
CleanData[CleanData$Error_==1 & ((CleanData$TargetY-CleanData$EndY)<(CleanData$W/2)*1.1) &(CleanData$TargetY-CleanData$EndY)>0,]$Error_=0
subset(CleanData, Subject==s & Button_Type==but & Condition==cond)
test=subset(CleanData, Subject==s & Button_Type==but & Condition==cond)
View(test)
CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"TP_2d_"]
mean(CleanData[CleanData$Subject==s & CleanData$Button_Type==but,"TP_2d_"])
s
but
test=(CleanData[CleanData$Subject==s & CleanData$Button_Type==but,"TP_2d_"])
test=(CleanData[CleanData$Subject==s & CleanData$Button_Type==but,])
test=(CleanData[CleanData$Subject==s & CleanData$Button_Type==but,])
View(test)
for(s in (unique(CleanData$Subject)))
{
for(but in unique(CleanData$Button_Type))
{
for(cond in unique(CleanData$Condition))
{
CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"TP_2d_"]= CleanData[CleanData$Condition==cond & CleanData$Subject==s & CleanData$Button_Type==but,"IDe_2d_"]/mean(subset(CleanData,Condition==cond & Subject==s & Button_Type==but & Error_==0)$MTe/1000)
}
CleanData[CleanData$Subject==s & CleanData$Button_Type==but,"Fitts_TP_avg_2d"]=mean(CleanData[CleanData$Subject==s & CleanData$Button_Type==but,"TP_2d_"])
}
}
df_TP=data.frame(Subject=numeric(),MSDT_TP=numeric(),SPOCK_TP=numeric(),SPOCK_RE_TP=numeric())
for(s in 1:length(unique(CleanData$Subject)))
{
x=subset(CleanData, Subject==unique(CleanData$Subject)[s]);
df_TP=rbind(df_TP, data.frame(Subject=unique(CleanData$Subject)[s], MSDT_TP=unique(subset(x, Button_Type=="MSDT")$Fitts_TP_avg_2d), SPOCK_TP=unique(subset(x, Button_Type=="SPOCK")$Fitts_TP_avg_2d), SPOCK_RE_TP=unique(subset(x, Button_Type=="SPOCK_Recalib")$Fitts_TP_avg_2d)))
}
MeanTP=colMeans(df_TP)
MeanTP
shapiro.test(df_TP$MSDT_TP-df_TP$SPOCK_TP)
shapiro.test(df_TP$MSDT_TP)
shapiro.test(df_TP$SPOCK_TP)
shapiro.test(df_TP$SPOCK_RE_TP)
MeanTP
df_TP
t.test(df_TP$MSDT_TP, df_TP$SPOCK_TP,paired=TRUE)#<--significant better
t.test(df_TP$MSDT_TP, df_TP$SPOCK_RE_TP,paired=TRUE)#<--significant better
t.test(df_TP$SPOCK_TP, df_TP$SPOCK_RE_TP,paired=TRUE)
wilcox.test(df_TP$MSDT_TP, df_TP$SPOCK_TP,paired=TRUE)
wilcox.test(df_TP$MSDT_TP, df_TP$SPOCK_RE_TP,paired=TRUE) #<--significant better SPOCK_RE
wilcox.test(df_TP$SPOCK_TP, df_TP$SPOCK_RE_TP,paired=TRUE)
t.test(df_TP$MSDT_TP, df_TP$SPOCK_TP,paired=TRUE)#<--significant better
t.test(df_TP$MSDT_TP, df_TP$SPOCK_RE_TP,paired=TRUE)#<--significant better
t.test(df_TP$SPOCK_TP, df_TP$SPOCK_RE_TP,paired=TRUE)
df_mean_error_subjects=data.frame(MSDT_error=numeric(),SPOCK_error=numeric(),SPOCK_RE_error=numeric())
for(cond in unique(CleanData$Condition))
{
for(samp in unique(CleanData$Trial))
{
x=subset(CleanData,Condition==cond & Trial==samp)
df_mean_error_subjects=rbind(df_mean_error_subjects,data.frame(MSDT_error=median(subset(x,Button_Type=="MSDT")$dx_2d_),SPOCK_error=median(subset(x,Button_Type=="SPOCK")$dx_2d_),SPOCK_RE_error=median(subset(x,Button_Type=="SPOCK_Recalib")$dx_2d_)))
}
}
p=ggplot(melt(df_mean_error_subjects,measure.vars=c("MSDT_error","SPOCK_error","SPOCK_RE_error"))) + geom_line(aes(x=rep(1:length(df_mean_error_subjects[,2]),3),y=value,colour=variable))+scale_colour_discrete("Pattern") ; print(p)
df_dist_precision=data.frame(A=numeric(),dx_MSDT=numeric(),dx_SPOCK=numeric(),dx_SPOCK_RE=numeric())
for(dist in unique(CleanData$A))
{
s=subset(CleanData,A==dist & Error_==0)
df_dist_precision=rbind(df_dist_precision,data.frame(A=dist,dx_MSDT=median(subset(s,Button_Type=="MSDT")$dx_2d_),
dx_SPOCK=median(subset(s,Button_Type=="SPOCK")$dx_2d_),dx_SPOCK_RE=median(subset(s,Button_Type=="SPOCK_Recalib")$dx_2d_)))
}
df_dist_precision=arrange(df_dist_precision,A )
mea_df_dist_precision=rbind(colMeans(df_dist_precision[1:2,]),colMeans(df_dist_precision[3:4,]),colMeans(df_dist_precision[5:6,]))
mea_df_dist_precision
df_dist_precision
View(ClickTimes)
df_meansClicktime=df_meansClicktime[0,]
for(s in 1:length(unique(ClickTimes$PartID)))
{
x=subset(ClickTimes, PartID==unique(ClickTimes$PartID)[s]);
a=subset(x, Button_Type=="MSDT")$ClickTime;
b=subset(x, Button_Type=="SPOCK")$ClickTime;
d=subset(x, Button_Type=="SPOCK_Recalib")$ClickTime;
a=a[a<quantile(a, .95)];
b=b[b<quantile(b, .95)];
d=d[d<quantile(d, .95)];
df_meansClicktime=rbind(df_meansClicktime, data.frame(PartID=unique(ClickTimes$PartID)[s], mea_msdt=mean(a), mea_spock=mean(b), mea_spockre=mean(d)))
}
df_meansClicktime=data.frame(PartID=numeric(),mea_msdt=numeric(),mea_spock=numeric(),mea_spockre=numeric())
df_meansClicktime=df_meansClicktime[0,]
for(s in 1:length(unique(ClickTimes$PartID)))
{
x=subset(ClickTimes, PartID==unique(ClickTimes$PartID)[s]);
a=subset(x, Button_Type=="MSDT")$ClickTime;
b=subset(x, Button_Type=="SPOCK")$ClickTime;
d=subset(x, Button_Type=="SPOCK_Recalib")$ClickTime;
a=a[a<quantile(a, .95)];
b=b[b<quantile(b, .95)];
d=d[d<quantile(d, .95)];
df_meansClicktime=rbind(df_meansClicktime, data.frame(PartID=unique(ClickTimes$PartID)[s], mea_msdt=mean(a), mea_spock=mean(b), mea_spockre=mean(d)))
}
df_meansClicktime
ClickTimes= read.table("C:/Users/dre/Documents/Matlab/StudyEvaluation/AllClickTimesCombined.csv",sep=",",header=1,skip=0)
df_meansClicktime=data.frame(PartID=numeric(),mea_msdt=numeric(),mea_spock=numeric(),mea_spockre=numeric())
df_meansClicktime=df_meansClicktime[0,]
for(s in 1:length(unique(ClickTimes$PartID)))
{
x=subset(ClickTimes, PartID==unique(ClickTimes$PartID)[s]);
a=subset(x, Button_Type=="MSDT")$ClickTime;
b=subset(x, Button_Type=="SPOCK")$ClickTime;
d=subset(x, Button_Type=="SPOCK_Recalib")$ClickTime;
a=a[a<quantile(a, .95)];
b=b[b<quantile(b, .95)];
d=d[d<quantile(d, .95)];
df_meansClicktime=rbind(df_meansClicktime, data.frame(PartID=unique(ClickTimes$PartID)[s], mea_msdt=mean(a), mea_spock=mean(b), mea_spockre=mean(d)))
}
df_meansClicktime
shapiro.test(df_meansClicktime$mea_msdt)
shapiro.test(df_meansClicktime$mea_spock)
shapiro.test(df_meansClicktime$mea_spockre)
shapiro.test(df_meansClicktime$mea_spockre-df_meansClicktime$mea_spock)
shapiro.test(df_meansClicktime$mea_spockre-df_meansClicktime$mea_msdt)
shapiro.test(df_meansClicktime$mea_spock-df_meansClicktime$mea_msdt)
ClickTimes=subset(ClickTimes, PartID!=Participant100 & PartID!=Participant105)
ClickTimes=subset(ClickTimes, PartID!="Participant100" & PartID!="Participant105")
df_meansClicktime=data.frame(PartID=numeric(),mea_msdt=numeric(),mea_spock=numeric(),mea_spockre=numeric())
df_meansClicktime=df_meansClicktime[0,]
for(s in 1:length(unique(ClickTimes$PartID)))
{
x=subset(ClickTimes, PartID==unique(ClickTimes$PartID)[s]);
a=subset(x, Button_Type=="MSDT")$ClickTime;
b=subset(x, Button_Type=="SPOCK")$ClickTime;
d=subset(x, Button_Type=="SPOCK_Recalib")$ClickTime;
a=a[a<quantile(a, .95)];
b=b[b<quantile(b, .95)];
d=d[d<quantile(d, .95)];
df_meansClicktime=rbind(df_meansClicktime, data.frame(PartID=unique(ClickTimes$PartID)[s], mea_msdt=mean(a), mea_spock=mean(b), mea_spockre=mean(d)))
}
shapiro.test(df_meansClicktime$mea_spock-df_meansClicktime$mea_msdt)
shapiro.test(df_meansClicktime$mea_spock)
shapiro.test(df_meansClicktime$mea_msdt)
shapiro.test(df_meansClicktime$mea_spockre)
wilcox.test(df_meansClicktime$mea_msdt, df_meansClicktime$mea_spock,paired=TRUE)
wilcox.test(df_meansClicktime$mea_msdt, df_meansClicktime$mea_spockre,paired=TRUE)
df_meansClicktime
wilcox.test(df_meansClicktime$mea_spockre, df_meansClicktime$mea_spock,paired=TRUE)
boxplot(CleanDataReshaped,col=as.double(CleanDataReshaped[1,]))
p=ggplot(CleanData, aes(colour=Button_Type, x=MTe)) + geom_density() + scale_x_log10(); print(p)
p=ggplot(ClickTimes, aes(colour=Button_Type, x=ClickTime)) + geom_density() + scale_x_log10(); print(p)
df_meansClicktime
colSums(df_meansClicktime)
colMeans(df_meansClicktime)
colMeans(df_meansClicktime[,2:4])
ClickTimes= read.table("C:/Users/dre/Documents/Matlab/StudyEvaluation/AllClickTimesCombined.csv",sep=",",header=1,skip=0)
ClickTimes=subset(ClickTimes, PartID!=100 & PartID!=105)
df_meansClicktime=data.frame(PartID=numeric(),mea_msdt=numeric(),mea_spock=numeric(),mea_spockre=numeric())
df_meansClicktime=df_meansClicktime[0,]
for(s in 1:length(unique(ClickTimes$PartID)))
{
x=subset(ClickTimes, PartID==unique(ClickTimes$PartID)[s]);
a=subset(x, Button_Type=="MSDT")$ClickTime;
b=subset(x, Button_Type=="SPOCK")$ClickTime;
d=subset(x, Button_Type=="SPOCK_Recalib")$ClickTime;
a=a[a<quantile(a, .95)];
b=b[b<quantile(b, .95)];
d=d[d<quantile(d, .95)];
df_meansClicktime=rbind(df_meansClicktime, data.frame(PartID=unique(ClickTimes$PartID)[s], mea_msdt=mean(a), mea_spock=mean(b), mea_spockre=mean(d)))
}
ggplot(ClickTimes, aes(colour=Button_Type, x=ClickTime)) +geom_line()
df_TP
ClickTimes
View(ClickTimes)
ggplot(ClickTimes)+geom_line(aes(x=Timestamp,y=ClickTime))
ggplot(subset(ClickTimes,Button_Type=="SPOCK"))+geom_line(aes(x=Timestamp,y=ClickTime))
ggplot(ClickTimes)+geom_line(aes(x=Timestamp,y=ClickTime,colour=Button_Type))
ggplot(melt(df_meansClicktime,id.vars="PartID")) + geom_line(aes(x=Timestamp,y=value,colour=Button_Type))+scale_colour_discrete("Pattern")
ggplot(melt(df_meansClicktime,id.vars="PartID")) + geom_line(aes(x="Timestamp",y=value,colour=Button_Type))+scale_colour_discrete("Pattern")
ggplot(melt(df_meansClicktime,id.vars="PartID")) + geom_line(aes(x="Timestamp",y=value,colour="Button_Type"))+scale_colour_discrete("Pattern")
df_meansClicktime
melt(df_meansClicktime,id.vars="PartID")
ggplot(melt(df_meansClicktime,id.vars="PartID")) + geom_line(aes(x=PartID,y=value,colour=variable))+scale_colour_discrete("Pattern")
ggplot(melt(df_meansClicktime,id.vars="PartID")) + geom_line(aes(x=PartID,y=value,colour=variable))
ggplot(melt(df_meansClicktime,id.vars="PartID")) + geom_line(aes(x=PartID,y=value,colour=variable))
ggplot(ClickTimes)+geom_line(aes(x=Timestamp,y=ClickTime,colour=Button_Type))
ggplot(ClickTimes)+geom_line(aes(x=Timestamp,y=ClickTime,colour=Button_Type))+geom_boxplot()
ggplot(ClickTimes)+geom_line(aes(x=Timestamp,y=ClickTime,colour=Button_Type))+geom_boxplot(aes(x=Timestamp,y=ClickTime,colour=Button_Type))
ggplot(ClickTimes)+geom_line(aes(x=Timestamp,y=ClickTime,colour=Button_Type))+geom_boxplot(aes(y=ClickTime,colour=Button_Type))
ggplot(ClickTimes)+geom_line(aes(x=Timestamp,y=ClickTime,colour=Button_Type))+geom_jitter(aes(x=Timestamp,y=ClickTime,colour=Button_Type))
ggplot(ClickTimes)+geom_jitter(aes(x=Timestamp,y=ClickTime,colour=Button_Type))
a
ggplot(a)+geom_line(aes(y=a)
)
ggplot(melt(df_meansClicktime,id.vars="PartID")) + geom_line(aes(x=PartID,y=value,colour=variable))
p=ggplot(ClickTimes, aes(colour=Button_Type, x=ClickTime)) + geom_density() + scale_x_log10(); print(p)
SUS= read.csv("C:/Users/dre/Documents/UserStudy/System Usability Scale - Sheet1.csv",header=1)
View(SUS)
rep(1:4, 2)
rep(1:4, each = 2)
rep(1:4, each = 3)
100:112
subjects=rep(100:111,each=3)
100%3
100mod3
Mod(100)
100%%3
seq(0, 1, length.out = 11)
install.packages('gtools')
library(gtools)
permutations(1:3,3)
permutations(1:3,3,2)
buttons=c("Spock","SPOCK_Recalib","MSDT")
permutations(n=3,r=1,v=buttons,repeats.allowed=T)
permutations(n=6,r=1,v=buttons,repeats.allowed=T)
permutations(n=3,r=3,v=buttons,repeats.allowed=T)
permutations(n=3,r=2,v=buttons,repeats.allowed=T)
buttons[3,1,2]
buttons(3,1,2)
buttons[3 1 2]
buttons[3 1 2,]
buttons[3:1:2,]
buttons[3:1:2]
##[1]
[1]
buttons[1]
buttons=c("Spock","SPOCK_Recalib","MSDT")[2]
buttons
buttons=c("Spock","SPOCK_Recalib","MSDT")
buttons[c(1,3,2)]
buttons[c(1,3,2,1,2)]
100%%3
buttons[0]
subjects=rep(100:111,each=3)
SUS=cbind(SUS,subjects)
SUS= read.csv("C:/Users/dre/Documents/UserStudy/System Usability Scale - Sheet1.csv",header=1)
SUS=cbind(subjects,SUS)
(SUS$subjects%%3)
buttons[4]
c((SUS$subjects%%3)+1,(SUS$subjects+1%%3)+1,(SUS$subjects+2%%3)+1)
(SUS$subjects%%3)
SUS$subjects+1%%3
(SUS$subjects+1)%%3
buttons[c(2,3,1,3,1,2,1,2,3,2,3,1,3,1,2,1,2,3,2,3,1,3,1,2,1,2,3,2,3,1,3,1,2,1,2,3)]
SUS=cbind(subjects,Button_Type=buttons[c(2,3,1,3,1,2,1,2,3,2,3,1,3,1,2,1,2,3,2,3,1,3,1,2,1,2,3,2,3,1,3,1,2,1,2,3)],SUS)
SUS= read.csv("C:/Users/dre/Documents/UserStudy/System Usability Scale - Sheet1.csv",header=1)
SUS=cbind(subjects,Button_Type=buttons[c(2,3,1,3,1,2,1,2,3,2,3,1,3,1,2,1,2,3,2,3,1,3,1,2,1,2,3,2,3,1,3,1,2,1,2,3)],SUS)
length(SUS$subjects)
SUS[r,c(4,6,8,10,12)]
r=1
SUS[r,c(4,6,8,10,12)]
SUS[r,c(4,6,8,10,12)]-1
(5-SUS[r,c(5,7,9,11,13)])
((SUS[r,c(4,6,8,10,12)]-1)+(5-SUS[r,c(5,7,9,11,13)]))
SUS[[r,c(4,6,8,10,12)]]
SUS[r,c(4,6,8,10,12)]
double(SUS[r,c(4,6,8,10,12)])
test=SUS[r,c(4,6,8,10,12)]
View(test)
test=matrix(SUS[r,c(4,6,8,10,12)])
View(test)
test
sum((SUS[r,c(4,6,8,10,12)]-1))
(sum(SUS[r,c(4,6,8,10,12)]-1)+sum(5-SUS[r,c(5,7,9,11,13)]))
(sum(SUS[r,c(4,6,8,10,12)]-1)+sum(5-SUS[r,c(5,7,9,11,13)]))*2.5
score=(sum(SUS[r,c(4,6,8,10,12)]-1)+sum(5-SUS[r,c(5,7,9,11,13)]))*2.5
score=(sum(SUS[,c(4,6,8,10,12)]-1)+sum(5-SUS[,c(5,7,9,11,13)]))*2.5
SUS[,c(4,6,8,10,12)]
sum(SUS[,c(4,6,8,10,12)]-1)
colSums(SUS[,c(4,6,8,10,12)]-1)
rowSums(SUS[,c(4,6,8,10,12)]-1)
(rowSums(SUS[,c(4,6,8,10,12)]-1)+rowSums(5-SUS[,c(5,7,9,11,13)]))
score=(rowSums(SUS[,c(4,6,8,10,12)]-1)+rowSums(5-SUS[,c(5,7,9,11,13)]))*2.5
score
SUS=cbind(SUS,score)
p=ggplot(ClickTimes, aes(colour=Button_Type, x=ClickTime)) + geom_density() + scale_x_log10(); print(p)
library(ggplot2)
library(reshape2)
library(plyr)
library(gtools)
p=ggplot(ClickTimes, aes(colour=Button_Type, x=ClickTime)) + geom_density() + scale_x_log10(); print(p)
p=ggplot(SUS, aes(colour=Button_Type, x=score)) + geom_density() + scale_x_log10(); print(p)
hist(SUS$score)
p=ggplot(SUS, aes(colour=Button_Type, x=score)) + geom_density(); print(p)
subset(SUS,Subject!=c(100,103,105))
subset(SUS,subject!=c(100,103,105))
subset(SUS,subjects!=c(100,103,105))
subset(SUS,subjects!=100 &subjects!=103 &subjects!=105)
subset(SUS,subjects!=100 & subjects!=103 & subjects!=105)
subset(SUS,subjects!=100)
subset(SUS,subjects!=100 & subjects!=103 & subjects!=105)
p=ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105)), aes(colour=Button_Type, x=score)) + geom_density(); print(p)
p=ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105), aes(colour=Button_Type, x=score)) + geom_density(); print(p)
mean(subset(SUS,Button_Type=="SPOCK")$score)
subset(SUS,Button_Type=="SPOCK")
buttons=c("SPOCK","SPOCK_Recalib","MSDT")
SUS= read.csv("C:/Users/dre/Documents/UserStudy/System Usability Scale - Sheet1.csv",header=1)
Subject=rep(100:111,each=3)
SUS=cbind(subjects,Button_Type=buttons[c(2,3,1,3,1,2,1,2,3,2,3,1,3,1,2,1,2,3,2,3,1,3,1,2,1,2,3,2,3,1,3,1,2,1,2,3)],SUS)
SUS=cbind(SUS,score)
mean(subset(SUS,Button_Type=="SPOCK")$score)
meaSUS=c(mea_SPOCK=mean(subset(SUS,Button_Type=="SPOCK")$score),mea_SPOCK_RE=mean(subset(SUS,Button_Type=="SPOCK_Recalib")$score),mea_MSDT=mean(subset(SUS,Button_Type=="MSDT")$score))
meaSUS
ggplot(SUS,aes(colour=Button_Type, x=score)+geom_boxplot()
)
ggplot(SUS,aes(colour=Button_Type, x=score))+geom_boxplot()
mutate(percrank=rank(value)/length(value))
dataf %>%
mutate(percrank=rank(value)/length(value))
SUS %>%
group_by(Subject, Button_Type) %>%
mutate(percrank=rank(score)/length(score))
p=ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105),  stat_ecdf((colour=Button_Type, x=score)) + scale_x_continuous(limits=c(1500, 6000))) ; print(p)
p=ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105),  stat_ecdf(colour=Button_Type, x=score)) + scale_x_continuous(limits=c(1500, 6000)) ; print(p)
p=ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105),aes(colour=Button_Type, x=score))  +stat_ecdf(colour=Button_Type, x=score) + scale_x_continuous(limits=c(1500, 6000)) ; print(p)
p=ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105),aes(colour=Button_Type, x=score))  +stat_ecdf() + scale_x_continuous(limits=c(1500, 6000)) ; print(p)
ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105),aes(colour=Button_Type, x=score))  +stat_ecdf()
p=ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105),aes(colour=Button_Type, x=score))  +stat_ecdf() + scale_x_continuous() ; print(p)
p=ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105),aes(colour=Button_Type, x=score))  +stat_ecdf()  ; print(p)
p=ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105),aes(colour=Button_Type, x=score y=Percentile))  +stat_ecdf()  ; print(p)
p=ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105),aes(colour=Button_Type, x=score, y=Percentile))  +stat_ecdf()  ; print(p)
p=ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105),aes(colour=Button_Type, x=score, y="Percentile"))  +stat_ecdf()  ; print(p)
p=ggplot(subset(SUS,subjects!=100 & subjects!=103 & subjects!=105),aes(colour=Button_Type, x=score))  +stat_ecdf() +labs(x="SUS-Score",y="Percentile")   ; print(p)
p=ggplot(SUS),aes(colour=Button_Type, x=score))  +stat_ecdf() +labs(x="SUS-Score",y="Percentile")   ; print(p)
p=ggplot(SUS,aes(colour=Button_Type, x=score))  +stat_ecdf() +labs(x="SUS-Score",y="Percentile")   ; print(p)
meaSUS
list.files(pattern="*.csv")
temp = list.files(C:\Users\dre\Documents\UserStudy,pattern="*.csv")
temp = list.files("C:\Users\dre\Documents\UserStudy",pattern="*.csv")
temp = list.files("C:/Users/dre/Documents/UserStudy",pattern="*.csv")
temp
for (i in 1:length(temp)) assign(temp[i], read.csv(temp[i]))
tlx_path="C:/Users/dre/Documents/UserStudy"
temp = list.files(tlx_path,pattern="*.csv")
temp[i]
read.csv(tlx_path+"/"+temp[i])
tlx_path+"/"+temp[i]
{paste(tlx_path,"/")
}
paste(tlx_path,"/",temp[i])
paste(tlx_path,"/",temp[i],sep = "")
TlxData=rbind(TlxData,read.csv(paste(tlx_path,"/",temp[i],sep = "")))
curFile=read.csv(paste(tlx_path,"/",temp[i],sep = ""))
curFile=read.csv(paste(tlx_path,"/",temp[i],sep = ""),header=1)
curFile=read.csv(paste(tlx_path,"/",temp[i],sep = ""),header=1,sep=",")
curFile=read.csv(paste(tlx_path,"/",temp[i],sep = ""),header=1,sep=",",na.strings="-")
curFile=read.table(paste(tlx_path,"/",temp[i],sep = ""),header=1,sep=",",na.strings="-")
curFile=read.table(paste(tlx_path,"/",temp[i],sep = ""),header=1,sep=",",na.strings="-",allowEscapes=TRUE)
curFile=read.csv(paste(tlx_path,"/",temp[i],sep = ""),header=1,sep=",",na.strings="-")
View(curFile)
for (i in 1:length(temp))
{
curFile=read.csv(paste(tlx_path,"/",temp[i],sep = ""),header=1,sep=",",na.strings="-")
TlxData=rbind(TlxData,curFile)
}
TlxData=0
for (i in 1:length(temp))
{
curFile=read.csv(paste(tlx_path,"/",temp[i],sep = ""),header=1,sep=",",na.strings="-")
TlxData=rbind(TlxData,curFile)
}
curFile
temp
temp = list.files(tlx_path,pattern="part*.csv")
temp
list.files(tlx_path,pattern="part*.csv")
temp = list.files(tlx_path,pattern="p*.csv")
list.files(tlx_path,pattern="p*.csv")
temp = list.files(tlx_path,pattern="par*.csv")
list.files(tlx_path,pattern="par*.csv")
list.files(tlx_path,pattern="*.csv")
list.files(tlx_path,pattern="part")
for (i in 1:length(temp))
{
curFile=read.csv(paste(tlx_path,"/",temp[i],sep = ""),header=1,sep=",",na.strings="-")
TlxData=rbind(TlxData,curFile)
}
list.files(tlx_path,pattern="part")
temp = list.files(tlx_path,pattern="part")
for (i in 1:length(temp))
{
curFile=read.csv(paste(tlx_path,"/",temp[i],sep = ""),header=1,sep=",",na.strings="-")
TlxData=rbind(TlxData,curFile)
}
TlxData
View(TlxData)
TlxData=TlxData[0,]
for (i in 1:length(temp))
{
curFile=read.csv(paste(tlx_path,"/",temp[i],sep = ""),header=1,sep=",",na.strings="-")
TlxData=rbind(TlxData,curFile)
}
tlx_path="C:/Users/dre/Documents/UserStudy"
temp = list.files(tlx_path,pattern="part")
TlxData=TlxData[0,]
for (i in 1:length(temp))
{
curFile=read.csv(paste(tlx_path,"/",temp[i],sep = ""),header=1,sep=",",na.strings="-")
TlxData=rbind(TlxData,curFile)
}
ggplot(TlxData,aes(colour=expID, x=tlx_Score))+geom_bar()
ggplot(TlxData,aes(colour=expID, x=parID))+geom_bar()
ggplot(TlxData,aes(colour=expID, x=parID))+geom_bar(y=tlx_Score)
ggplot(TlxData,aes(colour=expID, x=parID))+geom_bar(y=TlxData$tlx_Score)
ggplot(TlxData,aes(colour=expID, x=parID))+geom_bar(y=TlxData$tlx_Score,stat = "identity")
ggplot(TlxData,aes(colour=expID, x=parID,y=tlx_Score))+geom_bar(stat = "identity")
tlx_path="C:/Users/dre/Documents/UserStudy"
temp = list.files(tlx_path,pattern="part")
TlxData=TlxData[0,]
for (i in 1:length(temp))
{
curFile=read.csv(paste(tlx_path,"/",temp[i],sep = ""),header=1,sep=",",na.strings="-")
TlxData=rbind(TlxData,curFile)
}
ggplot(TlxData,aes(colour=expID, x=parID,y=tlx_Score))+geom_bar(stat = "identity")
ggplot(TlxData,aes(colour=expID, x=parID,y=tlx_Score))+geom_bar(stat = "identity",position=position_dodge())
ggplot(TlxData,aes(colour=expID,fill=expID, x=parID,y=tlx_Score))+geom_bar(stat = "identity",position=position_dodge())
